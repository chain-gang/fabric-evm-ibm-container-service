#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#


#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0

#
# The client section used by GO SDK.
#
client:

  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: org1

  logging:
    level: info

  # Root of the MSP directories with keys and certs.
  cryptoconfig:
    path: <path-to-crypto-config-folder>/crypto-config

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
  #   # [Optional]. Used by user store. Not needed if all credentials are embedded in configuration
  #   # and enrollments are performed elswhere.
    path: "/tmp/state-store"

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: /tmp/msp

   # BCCSP config for the client. Used by GO SDK.
  BCCSP:
    security:
     enabled: true
     default:
      provider: "SW"
     hashAlgorithm: "SHA2"
     softVerify: true
     level: 256

  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: true

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  mychannel:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    # deprecated: not recommended, to override any orderer configuration items, entity matchers should be used.
#    orderers:
#      - orderer.example.com

    # Required. list of peers from participating orgs
    peers:
      blockchain-org1peer0.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true
      blockchain-org2peer0.org2.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

    # [Optional]. The application can use these options to perform channel operations like retrieving channel
    # config etc.
    policies:
      #[Optional] options for retrieving channel configuration blocks
      queryChannelConfig:
        #[Optional] min number of success responses (from targets/peers)
        minResponses: 1
        #[Optional] channel config will be retrieved for these number of random targets
        maxTargets: 1
        #[Optional] retry options for query config block
        retryOpts:
          #[Optional] number of retry attempts
          attempts: 5
          #[Optional] the back off interval for the first retry attempt
          initialBackoff: 500ms
          #[Optional] the maximum back off interval for any retry attempt
          maxBackoff: 5s
          #[Optional] he factor by which the initial back off period is exponentially incremented
          backoffFactor: 2.0

#
# list of participating organizations in this network
#
organizations:
  org1:
    mspid: Org1MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/org1.example.com/users/{username}@org1.example.com/msp

    peers:
      - blockchain-org1peer0.org1.example.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:

  # the profile will contain public information about organizations other than the one it belongs to.
  # These are necessary information to make transaction lifecycles work, including MSP IDs and
  # peers with a public URL to send transaction proposals. The file will not contain private
  # information reserved for members of the organization, such as admin key and certificate,
  # fabric-ca registrar enroll ID and secret, etc.
  org2:
    mspid: Org2MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/org2.example.com/users/{username}@org2.example.com/msp

    peers:
      - blockchain-org2peer0.org2.example.com

    certificateAuthorities:

  # Orderer Org name
  ordererorg:
      # Membership Service Provider ID for this organization
      mspID: OrdererMSP

      # Needed to load users crypto keys and certs for this org (absolute path or relative to global crypto path, DEV mode)
      cryptoPath: ordererOrganizations/example.com/users/{username}@example.com/msp


#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  blockhain-orderer.example.com:
    url: blockchain-orderer.example.com:31010

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: blockchain-orderer.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: <path-to-crypto-config-folder>/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  blockchain-org1peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: blockchain-org1peer0.org1.example.com:30110

    grpcOptions:
      ssl-target-name-override: blockchain-org1peer0.org1.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: <path-to-crypto-config-folder>/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem

  blockchain-org2peer0.org2.example.com:
    url: blockchain-org2peer0.org2.example.com:30210
    grpcOptions:
      ssl-target-name-override: blockchain-org2peer0.org2.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      path: <path-to-crypto-config-folder>/crypto-config/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem

entityMatchers:
  peer:
    - pattern: blockchain-org1peer0.org1.example.(\w+)
      urlSubstitutionExp: <cluster-public-ip>:30110
      sslTargetOverrideUrlSubstitutionExp: blockchain-org1peer0.org1.example.com
      mappedHost: blockchain-org1peer0.org1.example.com

    - pattern: blockchain-org2peer0.org2.example.(\w+)
      urlSubstitutionExp: <cluster-public-ip>:30210
      sslTargetOverrideUrlSubstitutionExp: blockchain-org2peer0.org2.example.com
      mappedHost: blockchain-org2peer0.org2.example.com

    - pattern: (\w+).org1.example.(\w+):(\d+)
      urlSubstitutionExp: <cluster-public-ip>:$2
      sslTargetOverrideUrlSubstitutionExp: $1.org1.example.com
      mappedHost: $1.org1.example.com

    - pattern: (\w+).org2.example.(\w+):(\d+)
      urlSubstitutionExp: <cluster-public-ip>:$2
      sslTargetOverrideUrlSubstitutionExp: $1.org2.example.com
      mappedHost: $1.org2.example.com

    - pattern: (\w+):30110
      urlSubstitutionExp: <cluster-public-ip>:30110
      sslTargetOverrideUrlSubstitutionExp: blockchain-org1peer0.org1.example.com
      mappedHost: blockchain-org1peer0.org1.example.com

    - pattern: (\w+):30211
      urlSubstitutionExp: <cluster-public-ip>:30210
      sslTargetOverrideUrlSubstitutionExp: blockchain-org2peer0.org2.example.com
      mappedHost: blockchain-org2peer0.org2.example.com

  orderer:

    - pattern: (\w+).example.(\w+)
      urlSubstitutionExp: <cluster-public-ip>:31010
      sslTargetOverrideUrlSubstitutionExp: blockchain-orderer.example.com
      mappedHost: blockchain-orderer.example.com

    - pattern: (\w+).example.(\w+):(\d+)
      urlSubstitutionExp: <cluster-public-ip>:31010
      sslTargetOverrideUrlSubstitutionExp: blockchain-orderer.example.com
      mappedHost: blockhain-orderer.example.com

    - pattern: blockchain-orderer:31010
      urlSubstitutionExp: <cluster-public-ip>:31010
      sslTargetOverrideUrlSubstitutionExp: blockchain-orderer.example.com
      mappedHost: blockhain-orderer.example.com
